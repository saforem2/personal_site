---
date: ""
# date-modified: "today"
author: ""
keep-md: true
site-url: "https://samforeman.me"
citation:
   author: Sam Foreman
   type: webpage
   title: "Sam Foreman"
   url: https://samforeman.me
format:
  html:
    css:
      - css/profile.css
    grid:
      body-width: 800px
      sidebar-width: 0px
      margin-width: 0px
      gutter-width: 1.5em
  gfm:
    output-file: "README.md"
format-links: false
editor:
   render-on-save: true
listing:
  # sort: "date desc"
  - id: listing-posts
    contents:
      # - "./qmd/blog/index.qmd"
      - "./qmd/aurora-gpt/megatron-ds-intel.qmd"
      # - "./qmd/projects/index.qmd"
      - "./qmd/dope-slides/index.qmd"
      - "./qmd/startup-times/index.qmd"
      - "./qmd/flash-attn-sunspot/index.qmd"
      - "./qmd/l2hmc-qcd/diffusion/diffusion.qmd"
      - "./qmd/long-sequences/index.qmd"
      - "./qmd/mpi4py-reproducer/index.qmd"
      # - "./qmd/talks/index.qmd"
      # - "./qmd/dope-slides/index.qmd"
      # - "./qmd/startup-times/index.qmd"
      # - "./qmd/flash-attn-sunspot/index.qmd"
      # - "./qmd/l2hmc-qcd/diffusion/diffusion.qmd"
      # - "./qmd/long-sequences/index.qmd"
      # - "./qmd/mpi4py-reproducer/index.qmd"
      # - "./qmd/talks/index.qmd"
      # - "./qmd/**/*.qmd"
      # - "./qmd/*.qmd"
      # - "./qmd/**/*.qmd"
      # - "!./qmd/features.qmd"
      # - "!./qmd/blog/index.qmd"
      # - "!./qmd/ignore/*.qmd"
      # - "!./qmd/home/*.qmd"
      # - "!./qmd/*home-alt*/**"
      # - "!./qmd/home-talks-tab.qmd"
      # - "!./qmd/posts.qmd"
    type: table
    feed: true
    sort: "date desc"
---

::: {style="font-size:1.0em; text-align: center;"}

[![](./assets/avatar.png)]{.profile-avatar style="width: 100%; border: 0px solid var(--bg-border)!important;"}

[[üëã Hi, I'm Sam!]{.dim-text style="font-family:var(--font-family-headings);"} [[{{< ai orcid >}}]{.orcid-green style="background: none!important;"}](https://orcid.org/0000-0002-9981-0876)]{style="font-size: 1.5rem; color: var(--dim-text)!important; padding-bottom: 0pt; font-family: 'IBM Plex Sans Condensed'; font-weight: 500;"}

::: {style="display: flex; flex-direction: row; align-items: center; text-align: center!important; justify-content: center; background-color: var(--link-bg-color);"}

[[[{{< iconify ph house-line-duotone >}}]{.icon style="background-color:rgba(0,0,0,0.0);!important"}](https://samforeman.me)]{.icon style="font-size:1.5rem; padding-right: 0pt;"}
[[{{< iconify ph github-logo-duotone >}}](https://github.com/saforem2)]{.icon style="font-size:1.5rem; padding-left: 0pt; padding-right: 0pt"}
[[{{< iconify ph twitter-logo-duotone >}}](https://www.twitter.com/saforem2)]{.icon style="font-size:1.5rem; padding-left: 0pt; padding-right: 0pt"}
[[{{< iconify ph envelope-open-duotone >}}](mailto:///foremans@anl.gov)]{.icon style="font-size:1.5rem; padding-left: 0pt; padding-right: 0pt"}
[[{{< iconify ph graduation-cap-duotone >}}](https://scholar.google.com/citations?user=vV_1zDwAAAAJ&hl=en)]{.icon style="font-size:1.5rem; padding-left: 0pt; padding-right: 0pt"}
[[{{< iconify ph spotify-logo-duotone >}}](https://open.spotify.com/user/saforem2)]{.icon style="font-size:1.5rem; padding-left: 0pt; padding-right: 0pt"}
[[{{< iconify ph lastfm-logo-duotone >}}](https://www.last.fm/user/saforem2)]{.icon style="font-size:1.5rem; padding-left: 0pt; padding-right: 0pt"}
[[{{< iconify ph linkedin-logo-duotone >}}](https://linkedin.com/in/saforem2)]{.icon style="font-size:1.5rem; padding-left: 0pt; padding-right: 0pt"}

:::

:::

::: {layout="[ [60,-5,30] ]" layout-valign="center" style="display: flex; flex-direction: row; align-items: center; text-wrap: wrap"}

::: {style="border: 1px solid red;"}

## üßëüèª‚Äçüíª About Me

{{< include qmd/_about.qmd >}}

::: {.panel-tabset}

### üìù Work

{{< include qmd/_work.qmd >}}

### ü¶ú Talks

::: {style="font-size: 1.0em;"}

{{< include qmd/_talks.qmd >}}

:::

### üì¨ Posts

:::: {.feature}

::: {.feature-top}

::: {#listing-posts}
:::

:::

::::

### üì¶ Projects

{{< include qmd/_projects.qmd >}}

### ü™ñ Experience

{{< include qmd/_experience.qmd >}}

:::

```{python}
#| echo: false
import datetime
from rich import print
now = datetime.datetime.now()
day = now.strftime('%m/%d/%Y')
time = now.strftime('%H:%M:%S')
print(' '.join([
  "[dim][updated @[/]",
  f"[#1A8FFF]{time}[/]"
  f"[dim] on[/]",
  f"[#F06292]{day}[/][dim]][/]",
]))
```
